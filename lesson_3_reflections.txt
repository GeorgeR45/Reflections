When would you want to use a remote repository rather than keeping all your work local?

- A remote repository would be used when a project is being worked on by more than one person
  or when it is desiredto make the project available to anyone who might want to use it or add
  their own changes to it.

Why might you want to always pull changes manually rather than having Git automatically stay
up to date with your remote repository?

- To retain control over which changes to the remote repository are added to the local 
  repository and when they are added. 

Describe the differences between forks, clones and branches. When would you use one instead
of another?

- A branch is a different version of a project that exists within a single repository, 
  perhaps in a different language or with an additional feature. A clone is a new copy of
  an existing repository. The existing repository that is cloned can be on the local 
  machine or on a remote host such as Github. A fork is a copy of an existing repository 
  on Github that allow a user to make changes to their own copy of the repository without 
  affecting the original repository.  

What is the benefit of having a copy of the last known state of the remote stored locally?

- It is possible for git to know if local changes have been made since the local repository
  was last updated from the remote repository so that any conflicts that arise when the 
  local and remote branches are merged can be automatically detected and appropriate action
  taken by the user to resolve the conflicts.

How would you collaborate without using Git or Github? What would be easier and what 
would be harder?

- Without using Git and Github, collaborators would have to keep multiple complete copies
  of each version or stage of development of a project and would have to post the latest entire 
  copy of thier version of the project and would have to read the complete version of the 
  project from each collaborator before deciding how to merge them. Collaboration in this 
  way would be easier because users would not have to devote time to learing how to use 
  Git and Github, but would be harder and more time consuming in the long run because 
  users would have to spend more time on the collaboration phase of each project meaning 
  less time spent on the actual project work.
